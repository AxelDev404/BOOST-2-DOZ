{"ast":null,"code":"var _CssBaseline, _CssBaseline2;\nimport * as React from 'react';\nimport { useMediaQuery } from '@mui/material';\nimport { ThemeProvider, useColorScheme } from '@mui/material/styles';\nimport InitColorSchemeScript from '@mui/material/InitColorSchemeScript';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport invariant from 'invariant';\nimport { useLocalStorageState } from \"../useLocalStorageState/index.js\";\nimport { PaletteModeContext } from \"../shared/context.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst COLOR_SCHEME_STORAGE_KEY = 'toolpad-color-scheme';\nconst MODE_STORAGE_KEY = 'toolpad-mode';\nfunction usePreferredMode(window) {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', window && {\n    matchMedia: window.matchMedia\n  });\n  return prefersDarkMode ? 'dark' : 'light';\n}\nfunction isCssVarsTheme(theme) {\n  return 'vars' in theme;\n}\n/**\n * Compatibility layer for classic v5 themes. It will handle state management for the theme switcher.\n * In the v6 theme, this state management is handled by `useColorScheme`. But this hook will crash if\n * not run under context with a css vars theme.\n */\nfunction LegacyThemeProvider(props) {\n  const {\n    children,\n    theme,\n    window: appWindow\n  } = props;\n  invariant(!isCssVarsTheme(theme), 'This provider only accepts legacy themes.');\n  const isDualTheme = 'light' in theme || 'dark' in theme;\n  const preferredMode = usePreferredMode(appWindow);\n  const [userMode, setUserMode] = useLocalStorageState(MODE_STORAGE_KEY, 'system');\n  const paletteMode = !userMode || userMode === 'system' ? preferredMode : userMode;\n  const dualAwareTheme = React.useMemo(() => isDualTheme ? theme[paletteMode === 'dark' ? 'dark' : 'light'] ?? theme[paletteMode === 'dark' ? 'light' : 'dark'] : theme, [isDualTheme, paletteMode, theme]);\n\n  // The v5 shim, based on local state\n  const paletteModeContextValue = React.useMemo(() => ({\n    paletteMode,\n    setPaletteMode: setUserMode,\n    isDualTheme\n  }), [isDualTheme, paletteMode, setUserMode]);\n  return /*#__PURE__*/_jsx(ThemeProvider, {\n    theme: dualAwareTheme,\n    children: /*#__PURE__*/_jsxs(PaletteModeContext.Provider, {\n      value: paletteModeContextValue,\n      children: [_CssBaseline || (_CssBaseline = /*#__PURE__*/_jsx(CssBaseline, {\n        enableColorScheme: true\n      })), children]\n    })\n  });\n}\nfunction CssVarsPaletteModeProvider(props) {\n  const {\n    children,\n    window: appWindow\n  } = props;\n  const preferredMode = usePreferredMode(appWindow);\n  const {\n    mode,\n    setMode,\n    allColorSchemes\n  } = useColorScheme();\n\n  // The v6 API, based on `useColorScheme`\n  const paletteModeContextValue = React.useMemo(() => {\n    return {\n      paletteMode: !mode || mode === 'system' ? preferredMode : mode,\n      setPaletteMode: setMode,\n      isDualTheme: allColorSchemes.length > 1\n    };\n  }, [allColorSchemes, mode, preferredMode, setMode]);\n  return /*#__PURE__*/_jsx(PaletteModeContext.Provider, {\n    value: paletteModeContextValue,\n    children: children\n  });\n}\nfunction CssVarsThemeProvider(props) {\n  const {\n    children,\n    theme,\n    window: appWindow,\n    nonce\n  } = props;\n  invariant(isCssVarsTheme(theme), 'This provider only accepts CSS vars themes.');\n  return /*#__PURE__*/_jsxs(ThemeProvider, {\n    theme: theme,\n    documentNode: appWindow?.document,\n    colorSchemeNode: appWindow?.document.documentElement,\n    disableNestedContext: true,\n    colorSchemeStorageKey: COLOR_SCHEME_STORAGE_KEY,\n    modeStorageKey: MODE_STORAGE_KEY,\n    children: [/*#__PURE__*/_jsx(InitColorSchemeScript, {\n      attribute: theme.colorSchemeSelector,\n      colorSchemeStorageKey: COLOR_SCHEME_STORAGE_KEY,\n      modeStorageKey: MODE_STORAGE_KEY,\n      nonce: nonce\n    }), /*#__PURE__*/_jsxs(CssVarsPaletteModeProvider, {\n      window: appWindow,\n      children: [_CssBaseline2 || (_CssBaseline2 = /*#__PURE__*/_jsx(CssBaseline, {\n        enableColorScheme: true\n      })), children]\n    })]\n  });\n}\n/**\n * @ignore - internal component.\n */\nfunction AppThemeProvider(props) {\n  const {\n    children,\n    theme,\n    ...rest\n  } = props;\n  const useCssVarsProvider = isCssVarsTheme(theme);\n  return useCssVarsProvider ? /*#__PURE__*/_jsx(CssVarsThemeProvider, {\n    theme: theme,\n    ...rest,\n    children: children\n  }) : /*#__PURE__*/_jsx(LegacyThemeProvider, {\n    theme: theme,\n    ...rest,\n    children: children\n  });\n}\nexport { AppThemeProvider };","map":{"version":3,"names":["_CssBaseline","_CssBaseline2","React","useMediaQuery","ThemeProvider","useColorScheme","InitColorSchemeScript","CssBaseline","invariant","useLocalStorageState","PaletteModeContext","jsx","_jsx","jsxs","_jsxs","COLOR_SCHEME_STORAGE_KEY","MODE_STORAGE_KEY","usePreferredMode","window","prefersDarkMode","matchMedia","isCssVarsTheme","theme","LegacyThemeProvider","props","children","appWindow","isDualTheme","preferredMode","userMode","setUserMode","paletteMode","dualAwareTheme","useMemo","paletteModeContextValue","setPaletteMode","Provider","value","enableColorScheme","CssVarsPaletteModeProvider","mode","setMode","allColorSchemes","length","CssVarsThemeProvider","nonce","documentNode","document","colorSchemeNode","documentElement","disableNestedContext","colorSchemeStorageKey","modeStorageKey","attribute","colorSchemeSelector","AppThemeProvider","rest","useCssVarsProvider"],"sources":["C:/Users/alexa/Desktop/practice/frontend/oda/node_modules/@toolpad/core/esm/AppProvider/AppThemeProvider.js"],"sourcesContent":["var _CssBaseline, _CssBaseline2;\nimport * as React from 'react';\nimport { useMediaQuery } from '@mui/material';\nimport { ThemeProvider, useColorScheme } from '@mui/material/styles';\nimport InitColorSchemeScript from '@mui/material/InitColorSchemeScript';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport invariant from 'invariant';\nimport { useLocalStorageState } from \"../useLocalStorageState/index.js\";\nimport { PaletteModeContext } from \"../shared/context.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst COLOR_SCHEME_STORAGE_KEY = 'toolpad-color-scheme';\nconst MODE_STORAGE_KEY = 'toolpad-mode';\nfunction usePreferredMode(window) {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', window && {\n    matchMedia: window.matchMedia\n  });\n  return prefersDarkMode ? 'dark' : 'light';\n}\nfunction isCssVarsTheme(theme) {\n  return 'vars' in theme;\n}\n/**\n * Compatibility layer for classic v5 themes. It will handle state management for the theme switcher.\n * In the v6 theme, this state management is handled by `useColorScheme`. But this hook will crash if\n * not run under context with a css vars theme.\n */\nfunction LegacyThemeProvider(props) {\n  const {\n    children,\n    theme,\n    window: appWindow\n  } = props;\n  invariant(!isCssVarsTheme(theme), 'This provider only accepts legacy themes.');\n  const isDualTheme = 'light' in theme || 'dark' in theme;\n  const preferredMode = usePreferredMode(appWindow);\n  const [userMode, setUserMode] = useLocalStorageState(MODE_STORAGE_KEY, 'system');\n  const paletteMode = !userMode || userMode === 'system' ? preferredMode : userMode;\n  const dualAwareTheme = React.useMemo(() => isDualTheme ? theme[paletteMode === 'dark' ? 'dark' : 'light'] ?? theme[paletteMode === 'dark' ? 'light' : 'dark'] : theme, [isDualTheme, paletteMode, theme]);\n\n  // The v5 shim, based on local state\n  const paletteModeContextValue = React.useMemo(() => ({\n    paletteMode,\n    setPaletteMode: setUserMode,\n    isDualTheme\n  }), [isDualTheme, paletteMode, setUserMode]);\n  return /*#__PURE__*/_jsx(ThemeProvider, {\n    theme: dualAwareTheme,\n    children: /*#__PURE__*/_jsxs(PaletteModeContext.Provider, {\n      value: paletteModeContextValue,\n      children: [_CssBaseline || (_CssBaseline = /*#__PURE__*/_jsx(CssBaseline, {\n        enableColorScheme: true\n      })), children]\n    })\n  });\n}\nfunction CssVarsPaletteModeProvider(props) {\n  const {\n    children,\n    window: appWindow\n  } = props;\n  const preferredMode = usePreferredMode(appWindow);\n  const {\n    mode,\n    setMode,\n    allColorSchemes\n  } = useColorScheme();\n\n  // The v6 API, based on `useColorScheme`\n  const paletteModeContextValue = React.useMemo(() => {\n    return {\n      paletteMode: !mode || mode === 'system' ? preferredMode : mode,\n      setPaletteMode: setMode,\n      isDualTheme: allColorSchemes.length > 1\n    };\n  }, [allColorSchemes, mode, preferredMode, setMode]);\n  return /*#__PURE__*/_jsx(PaletteModeContext.Provider, {\n    value: paletteModeContextValue,\n    children: children\n  });\n}\nfunction CssVarsThemeProvider(props) {\n  const {\n    children,\n    theme,\n    window: appWindow,\n    nonce\n  } = props;\n  invariant(isCssVarsTheme(theme), 'This provider only accepts CSS vars themes.');\n  return /*#__PURE__*/_jsxs(ThemeProvider, {\n    theme: theme,\n    documentNode: appWindow?.document,\n    colorSchemeNode: appWindow?.document.documentElement,\n    disableNestedContext: true,\n    colorSchemeStorageKey: COLOR_SCHEME_STORAGE_KEY,\n    modeStorageKey: MODE_STORAGE_KEY,\n    children: [/*#__PURE__*/_jsx(InitColorSchemeScript, {\n      attribute: theme.colorSchemeSelector,\n      colorSchemeStorageKey: COLOR_SCHEME_STORAGE_KEY,\n      modeStorageKey: MODE_STORAGE_KEY,\n      nonce: nonce\n    }), /*#__PURE__*/_jsxs(CssVarsPaletteModeProvider, {\n      window: appWindow,\n      children: [_CssBaseline2 || (_CssBaseline2 = /*#__PURE__*/_jsx(CssBaseline, {\n        enableColorScheme: true\n      })), children]\n    })]\n  });\n}\n/**\n * @ignore - internal component.\n */\nfunction AppThemeProvider(props) {\n  const {\n    children,\n    theme,\n    ...rest\n  } = props;\n  const useCssVarsProvider = isCssVarsTheme(theme);\n  return useCssVarsProvider ? /*#__PURE__*/_jsx(CssVarsThemeProvider, {\n    theme: theme,\n    ...rest,\n    children: children\n  }) : /*#__PURE__*/_jsx(LegacyThemeProvider, {\n    theme: theme,\n    ...rest,\n    children: children\n  });\n}\nexport { AppThemeProvider };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}