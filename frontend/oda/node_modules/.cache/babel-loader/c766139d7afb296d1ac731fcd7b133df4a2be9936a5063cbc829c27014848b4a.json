{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@mui/material/styles';\nimport { en as DEFAULT_LOCALE } from \"../locales/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const LocalizationContext = /*#__PURE__*/React.createContext({});\nconst LocalizationProvider = function LocalizationProvider(props) {\n  const {\n    localeText: propsLocaleText,\n    children\n  } = props;\n  const theme = useTheme();\n  // @ts-ignore\n  const themeLocaleText = theme?.components?.MuiLocalizationProvider?.defaultProps?.localeText;\n  const defaultLocaleText = DEFAULT_LOCALE.components.MuiLocalizationProvider.defaultProps.localeText;\n\n  /* The order of overrides is:\n   * 1. The `localeText` prop of the `AppProvider` supersedes\n   * 2. The localeText provided as an argument to the `createTheme` function, which supersedes\n   * 3. The default locale text\n   */\n\n  const localeText = React.useMemo(() => ({\n    ...defaultLocaleText,\n    ...themeLocaleText,\n    ...propsLocaleText\n  }), [defaultLocaleText, themeLocaleText, propsLocaleText]);\n  return /*#__PURE__*/_jsx(LocalizationContext.Provider, {\n    value: localeText,\n    children: children\n  });\n};\nprocess.env.NODE_ENV !== \"production\" ? LocalizationProvider.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Locale for components texts\n   */\n  localeText: PropTypes.object\n} : void 0;\nexport { LocalizationProvider };\n/**\n *\n * Demos:\n *\n * - [Sign-in Page](https://mui.com/toolpad/core/react-sign-in-page/)\n *\n * API:\n *\n * - [LocalizationProvider API](https://mui.com/toolpad/core/api/localization-provider)\n */\nexport function useLocaleText() {\n  return React.useContext(LocalizationContext);\n}","map":{"version":3,"names":["React","PropTypes","useTheme","en","DEFAULT_LOCALE","jsx","_jsx","LocalizationContext","createContext","LocalizationProvider","props","localeText","propsLocaleText","children","theme","themeLocaleText","components","MuiLocalizationProvider","defaultProps","defaultLocaleText","useMemo","Provider","value","process","env","NODE_ENV","propTypes","node","object","useLocaleText","useContext"],"sources":["C:/Users/alexa/Desktop/practice/frontend/oda/node_modules/@toolpad/core/esm/AppProvider/LocalizationProvider.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@mui/material/styles';\nimport { en as DEFAULT_LOCALE } from \"../locales/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const LocalizationContext = /*#__PURE__*/React.createContext({});\nconst LocalizationProvider = function LocalizationProvider(props) {\n  const {\n    localeText: propsLocaleText,\n    children\n  } = props;\n  const theme = useTheme();\n  // @ts-ignore\n  const themeLocaleText = theme?.components?.MuiLocalizationProvider?.defaultProps?.localeText;\n  const defaultLocaleText = DEFAULT_LOCALE.components.MuiLocalizationProvider.defaultProps.localeText;\n\n  /* The order of overrides is:\n   * 1. The `localeText` prop of the `AppProvider` supersedes\n   * 2. The localeText provided as an argument to the `createTheme` function, which supersedes\n   * 3. The default locale text\n   */\n\n  const localeText = React.useMemo(() => ({\n    ...defaultLocaleText,\n    ...themeLocaleText,\n    ...propsLocaleText\n  }), [defaultLocaleText, themeLocaleText, propsLocaleText]);\n  return /*#__PURE__*/_jsx(LocalizationContext.Provider, {\n    value: localeText,\n    children: children\n  });\n};\nprocess.env.NODE_ENV !== \"production\" ? LocalizationProvider.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Locale for components texts\n   */\n  localeText: PropTypes.object\n} : void 0;\nexport { LocalizationProvider };\n/**\n *\n * Demos:\n *\n * - [Sign-in Page](https://mui.com/toolpad/core/react-sign-in-page/)\n *\n * API:\n *\n * - [LocalizationProvider API](https://mui.com/toolpad/core/api/localization-provider)\n */\nexport function useLocaleText() {\n  return React.useContext(LocalizationContext);\n}"],"mappings":"AAAA,YAAY;;AAEZ,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,EAAE,IAAIC,cAAc,QAAQ,qBAAqB;AAC1D,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,OAAO,MAAMC,mBAAmB,GAAG,aAAaP,KAAK,CAACQ,aAAa,CAAC,CAAC,CAAC,CAAC;AACvE,MAAMC,oBAAoB,GAAG,SAASA,oBAAoBA,CAACC,KAAK,EAAE;EAChE,MAAM;IACJC,UAAU,EAAEC,eAAe;IAC3BC;EACF,CAAC,GAAGH,KAAK;EACT,MAAMI,KAAK,GAAGZ,QAAQ,CAAC,CAAC;EACxB;EACA,MAAMa,eAAe,GAAGD,KAAK,EAAEE,UAAU,EAAEC,uBAAuB,EAAEC,YAAY,EAAEP,UAAU;EAC5F,MAAMQ,iBAAiB,GAAGf,cAAc,CAACY,UAAU,CAACC,uBAAuB,CAACC,YAAY,CAACP,UAAU;;EAEnG;AACF;AACA;AACA;AACA;;EAEE,MAAMA,UAAU,GAAGX,KAAK,CAACoB,OAAO,CAAC,OAAO;IACtC,GAAGD,iBAAiB;IACpB,GAAGJ,eAAe;IAClB,GAAGH;EACL,CAAC,CAAC,EAAE,CAACO,iBAAiB,EAAEJ,eAAe,EAAEH,eAAe,CAAC,CAAC;EAC1D,OAAO,aAAaN,IAAI,CAACC,mBAAmB,CAACc,QAAQ,EAAE;IACrDC,KAAK,EAAEX,UAAU;IACjBE,QAAQ,EAAEA;EACZ,CAAC,CAAC;AACJ,CAAC;AACDU,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGhB,oBAAoB,CAACiB,SAAS,CAAC,yBAAyB;EAC9F;EACA;EACA;EACA;EACA;AACF;AACA;EACEb,QAAQ,EAAEZ,SAAS,CAAC0B,IAAI;EACxB;AACF;AACA;EACEhB,UAAU,EAAEV,SAAS,CAAC2B;AACxB,CAAC,GAAG,KAAK,CAAC;AACV,SAASnB,oBAAoB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoB,aAAaA,CAAA,EAAG;EAC9B,OAAO7B,KAAK,CAAC8B,UAAU,CAACvB,mBAAmB,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}