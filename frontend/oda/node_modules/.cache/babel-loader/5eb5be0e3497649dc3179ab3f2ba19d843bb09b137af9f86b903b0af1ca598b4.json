{"ast":null,"code":"'use client';\n\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { DialogsContext } from \"./DialogsContext.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * Provider for Dialog stacks. The subtree of this component can use the `useDialogs` hook to\n * access the dialogs API. The dialogs are rendered in the order they are requested.\n *\n * Demos:\n *\n * - [useDialogs](https://mui.com/toolpad/core/react-use-dialogs/)\n *\n * API:\n *\n * - [DialogsProvider API](https://mui.com/toolpad/core/api/dialogs-provider)\n */\nfunction DialogsProvider(props) {\n  const {\n    children,\n    unmountAfter = 1000\n  } = props;\n  const [stack, setStack] = React.useState([]);\n  const keyPrefix = React.useId();\n  const nextId = React.useRef(0);\n  const dialogMetadata = React.useRef(new WeakMap());\n  const requestDialog = useEventCallback(function open(Component, payload, options = {}) {\n    const {\n      onClose = async () => {}\n    } = options;\n    let resolve;\n    const promise = new Promise(resolveImpl => {\n      resolve = resolveImpl;\n    });\n    invariant(resolve, 'resolve not set');\n    const key = `${keyPrefix}-${nextId.current}`;\n    nextId.current += 1;\n    const newEntry = {\n      key,\n      open: true,\n      promise,\n      Component,\n      payload,\n      onClose,\n      resolve\n    };\n\n    // Store metadata for reliable access during close\n    dialogMetadata.current.set(promise, newEntry);\n    setStack(prevStack => [...prevStack, newEntry]);\n    return promise;\n  });\n  const closeDialogUi = useEventCallback(function closeDialogUi(dialog) {\n    setStack(prevStack => prevStack.map(entry => entry.promise === dialog ? {\n      ...entry,\n      open: false\n    } : entry));\n    setTimeout(() => {\n      // wait for closing animation\n      setStack(prevStack => prevStack.filter(entry => entry.promise !== dialog));\n      // WeakMap automatically cleans up when promise is garbage collected\n    }, unmountAfter);\n  });\n  const closeDialog = useEventCallback(async function closeDialog(dialog, result) {\n    const entryToClose = dialogMetadata.current.get(dialog);\n    invariant(entryToClose, 'dialog not found');\n    try {\n      await entryToClose.onClose(result);\n    } finally {\n      entryToClose.resolve(result);\n      closeDialogUi(dialog);\n    }\n    return dialog;\n  });\n  const contextValue = React.useMemo(() => ({\n    open: requestDialog,\n    close: closeDialog\n  }), [requestDialog, closeDialog]);\n  return /*#__PURE__*/_jsxs(DialogsContext.Provider, {\n    value: contextValue,\n    children: [children, stack.map(({\n      key,\n      open,\n      Component,\n      payload,\n      promise\n    }) => /*#__PURE__*/_jsx(Component, {\n      payload: payload,\n      open: open,\n      onClose: async result => {\n        await closeDialog(promise, result);\n      }\n    }, key))]\n  });\n}\nexport { DialogsProvider };","map":{"version":3,"names":["invariant","React","useEventCallback","DialogsContext","jsx","_jsx","jsxs","_jsxs","DialogsProvider","props","children","unmountAfter","stack","setStack","useState","keyPrefix","useId","nextId","useRef","dialogMetadata","WeakMap","requestDialog","open","Component","payload","options","onClose","resolve","promise","Promise","resolveImpl","key","current","newEntry","set","prevStack","closeDialogUi","dialog","map","entry","setTimeout","filter","closeDialog","result","entryToClose","get","contextValue","useMemo","close","Provider","value"],"sources":["C:/Users/alexa/Desktop/practice/frontend/oda/node_modules/@toolpad/core/esm/useDialogs/DialogsProvider.js"],"sourcesContent":["'use client';\n\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { DialogsContext } from \"./DialogsContext.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * Provider for Dialog stacks. The subtree of this component can use the `useDialogs` hook to\n * access the dialogs API. The dialogs are rendered in the order they are requested.\n *\n * Demos:\n *\n * - [useDialogs](https://mui.com/toolpad/core/react-use-dialogs/)\n *\n * API:\n *\n * - [DialogsProvider API](https://mui.com/toolpad/core/api/dialogs-provider)\n */\nfunction DialogsProvider(props) {\n  const {\n    children,\n    unmountAfter = 1000\n  } = props;\n  const [stack, setStack] = React.useState([]);\n  const keyPrefix = React.useId();\n  const nextId = React.useRef(0);\n  const dialogMetadata = React.useRef(new WeakMap());\n  const requestDialog = useEventCallback(function open(Component, payload, options = {}) {\n    const {\n      onClose = async () => {}\n    } = options;\n    let resolve;\n    const promise = new Promise(resolveImpl => {\n      resolve = resolveImpl;\n    });\n    invariant(resolve, 'resolve not set');\n    const key = `${keyPrefix}-${nextId.current}`;\n    nextId.current += 1;\n    const newEntry = {\n      key,\n      open: true,\n      promise,\n      Component,\n      payload,\n      onClose,\n      resolve\n    };\n\n    // Store metadata for reliable access during close\n    dialogMetadata.current.set(promise, newEntry);\n    setStack(prevStack => [...prevStack, newEntry]);\n    return promise;\n  });\n  const closeDialogUi = useEventCallback(function closeDialogUi(dialog) {\n    setStack(prevStack => prevStack.map(entry => entry.promise === dialog ? {\n      ...entry,\n      open: false\n    } : entry));\n    setTimeout(() => {\n      // wait for closing animation\n      setStack(prevStack => prevStack.filter(entry => entry.promise !== dialog));\n      // WeakMap automatically cleans up when promise is garbage collected\n    }, unmountAfter);\n  });\n  const closeDialog = useEventCallback(async function closeDialog(dialog, result) {\n    const entryToClose = dialogMetadata.current.get(dialog);\n    invariant(entryToClose, 'dialog not found');\n    try {\n      await entryToClose.onClose(result);\n    } finally {\n      entryToClose.resolve(result);\n      closeDialogUi(dialog);\n    }\n    return dialog;\n  });\n  const contextValue = React.useMemo(() => ({\n    open: requestDialog,\n    close: closeDialog\n  }), [requestDialog, closeDialog]);\n  return /*#__PURE__*/_jsxs(DialogsContext.Provider, {\n    value: contextValue,\n    children: [children, stack.map(({\n      key,\n      open,\n      Component,\n      payload,\n      promise\n    }) => /*#__PURE__*/_jsx(Component, {\n      payload: payload,\n      open: open,\n      onClose: async result => {\n        await closeDialog(promise, result);\n      }\n    }, key))]\n  });\n}\nexport { DialogsProvider };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}